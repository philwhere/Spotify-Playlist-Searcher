@using System.Text.Encodings.Web
@using Microsoft.Extensions.Options
@using Spotify.Configuration
@inject IOptions<SpotifyClientConfiguration> OptionsClientConfiguration

@{
    ViewData["Title"] = "Home";
}

@section Scripts
{
    <script>
        $(document).ready(async () => {
            const params = GetUrlParams();
            if (!params.code) {
                ShowLoader("Authorizing...");
                const scopes = [
                    "playlist-read-private",
                    "playlist-modify-public",
                    "playlist-modify-private",
                    "user-library-read",
                    "user-modify-playback-state",
                    "user-read-email",
                    "user-read-private",
                    "user-read-recently-played",
                    "streaming"
                ].join("%20");
                window.location = `https://accounts.spotify.com/authorize?client_id=@(OptionsClientConfiguration.Value.ClientId)&redirect_uri=@(GetEncodedRedirectUri())&scope=${scopes}&response_type=code`;
            } else {
                await GetAuthorization(params.code);

                const possibleRedirect = localStorage.getItem(LocalStorageKeys.REDIRECT_URL);
                if (possibleRedirect) {
                    localStorage.removeItem(LocalStorageKeys.REDIRECT_URL);
                    window.location = possibleRedirect;
                    return;
                }
                window.location = "@Url.Action("PlaylistSearch", "Home")";
            }
        });

        async function GetAuthorization(code) {
            ShowLoader("Getting access...");
            return await fetch(`/api/spotify/authorize?code=${code}&redirectUri=@(GetEncodedRedirectUri())`)
                .then(response => response.json())
                .then(json => {
                    HideLoader();
                    SetupAuthorization(json.access_token, json.refresh_token, CalculateExpiryInUnixMs(json.expires_in));
                })
                .catch((error) => {
                    AuthorizeClient();
                    throw error;
                });
        }
    </script>
}

@functions {
    string GetEncodedRedirectUri()
    {
        var baseUrl = $"{Context.Request.Scheme}://{Context.Request.Host}/";
        return UrlEncoder.Default.Encode(baseUrl);
    }
}
